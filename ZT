using IMath;
using System;
using System.Reflection;

namespace IMath
{
    public interface ICalculator
    {
        double Add(double num1, double num2);
        double Subtract(double num1, double num2);
        double Multiply(double num1, double num2);
        double Divide(double num1, double num2);
    }
}

namespace Math
{
    public class Calculator : ICalculator
    {
        public double Add(double num1, double num2)
        {
            return num1 + num2;
        }

        public double Subtract(double num1, double num2)
        {
            return num1 - num2;
        }

        public double Multiply(double num1, double num2)
        {
            return num1 * num2;
        }

        public double Divide(double num1, double num2)
        {
            if (num2 == 0)
            {
                throw new DivideByZeroException();
            }

            return num1 / num2;
        }
    }
}

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            ICalculator calculator = CreateInstance<ICalculator>("Math.Calculator");

            double num1 = 10;
            double num2 = 5;

            Console.WriteLine($"Addition: {calculator.Add(num1, num2)}");
            Console.WriteLine($"Subtraction: {calculator.Subtract(num1, num2)}");
            Console.WriteLine($"Multiplication: {calculator.Multiply(num1, num2)}");
            Console.WriteLine($"Division: {calculator.Divide(num1, num2)}");

            Console.ReadLine();
        }

        static T CreateInstance<T>(string typeName)
        {
            Type type = Type.GetType(typeName);
            if (type == null)
            {
                throw new ArgumentException($"Type '{typeName}' not found.");
            }

            object instance = Activator.CreateInstance(type);
            if (instance == null)
            {
                throw new InvalidOperationException($"Failed to create an instance of type '{typeName}'.");
            }

            return (T)instance;
        }
    }
}
